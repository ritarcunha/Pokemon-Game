Index: TrabalhoSecreto/src/game/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TrabalhoSecreto/src/game/Game.java b/TrabalhoSecreto/src/game/Game.java
--- a/TrabalhoSecreto/src/game/Game.java	
+++ b/TrabalhoSecreto/src/game/Game.java	
@@ -5,112 +5,87 @@
 import game.Player.Handler;
 import game.Player.Player;
 import game.Player.Position;
-import game.Enemies.TeamRocket;
 import org.academiadecodigo.simplegraphics.graphics.Color;
 import org.academiadecodigo.simplegraphics.graphics.Rectangle;
 import org.academiadecodigo.simplegraphics.pictures.Picture;
 
 public class Game {
 
-    public final static int DISTANCE=30;
-    LinkedList link1= new LinkedList();
+    public final static int DISTANCE = 30;
+    private LinkedList link1 = new LinkedList();
+    private Picture p1 = new Picture(0, 0, "resources/batalha.png");
+    private Sound sound = new Sound();
 
-    Picture p1= new Picture (0, 0, "resources/batalha.png");
-
-    private String [] [] field = {{"block", "block", "block", "block", "block", "tree", "block", "block", "tree","block", "block" },
-                                  {"block", "tree", "block", "block", "block", "block", "block", "TR", "block", "block", "block"},
-                                  {"block", "block", "block", "block", "TR", "block", "block", "block", "block", "block", "tree"},
-                                  {"tree", "block", "block", "block", "block", "block", "tree", "block", "block","block", "block"},
-                                  {"block", "block", "TR", "block", "block", "block", "block", "block", "block","block", "block" },
-                                  {"block", "block", "block", "block", "block", "tree", "block", "block", "block","block", "block" },
-                                  {"block", "block", "block", "block", "block", "block", "block", "block", "block","block", "block" },
-                                  {"block", "block", "TR", "block", "block", "tree", "block", "block", "tree","block", "block" },
-                                  {"block", "block", "block", "block", "block", "block", "block", "block", "tree","block", "TR" }};
-                          //criamos uma matriz para o campo de jogo
-                           //field.length- da me o numero de arrays da matriz e de rows
-                            //field[0].length- da me o numero de elemnetos de cada um dos array
-                             //field [i][j].length- da me o comprimento da string de uma determinada posição
-                               //field[i].length*field.length-da me o numero total de elementos
+    private String[][] field = {
+            {"block", "block", "block", "block", "block", "tree", "block", "block", "tree", "block", "block"},
+            {"block", "tree", "block", "block", "block", "block", "block", "TR", "block", "block", "block"},
+            {"block", "block", "block", "block", "TR", "block", "block", "block", "block", "block", "tree"},
+            {"tree", "block", "block", "block", "block", "block", "tree", "block", "block", "block", "block"},
+            {"block", "block", "TR", "block", "block", "block", "block", "block", "block", "block", "block"},
+            {"block", "block", "block", "block", "block", "tree", "block", "block", "block", "block", "block"},
+            {"block", "block", "block", "block", "block", "block", "block", "block", "block", "block", "block"},
+            {"block", "block", "TR", "block", "block", "tree", "block", "block", "tree", "block", "block"},
+            {"block", "block", "block", "block", "block", "block", "block", "block", "tree", "block", "TR"}
+    };
 
-    public String [] [] getField(){
+    public String[][] getField() {
         return this.field;
     }
 
-    public void draw(){                             //field.length da me a quantidade de arrays
-        for(int i=0;i < field.length;i++){         //Aqui percorremos cada fila da matriz (array dos arrays)
-            for(int j=0; j<field[i].length; j++){        //Aqui percorremos cada posição da matriz (cada String do array)
-                if (field[i][j]== "block") {
-                      drawFloor(j,i);
+    public void draw() {
+        for (int i = 0; i < field.length; i++) {
+            for (int j = 0; j < field[i].length; j++) {
+                if (field[i][j].equals("block")) {
+                    drawFloor(j, i);
                 }
-                if (field[i][j]== "tree"){//se tivesse com [i][j]== [1][1] ele iria estar a comparar um bloco com outro bloco
-                            drawTree(j, i);
+                if (field[i][j].equals("tree")) {
+                    drawTree(j, i);
                 }
-
-                if(field[i][j]=="TR"){
-                    drawTR(j,i);
-
+                if (field[i][j].equals("TR")) {
+                    drawTR(j, i);
                 }
-
             }
         }
     }
 
-    public void drawTree(int j, int i){
-         Rectangle rectangle = new Rectangle(j * DISTANCE, i * DISTANCE, DISTANCE, DISTANCE);
-         Rectangle rectangle1= new Rectangle(j*DISTANCE,i*DISTANCE, 20, 20);
-         rectangle.setColor(Field.lIGHTBROWN);
-         rectangle1.setColor(Color.GREEN);
-         rectangle.fill();
-         rectangle1.fill();
-
+    public void drawTree(int j, int i) {
+        Rectangle rectangle = new Rectangle(j * DISTANCE, i * DISTANCE, DISTANCE, DISTANCE);
+        Rectangle rectangle1 = new Rectangle(j * DISTANCE, i * DISTANCE, 20, 20);
+        rectangle.setColor(Field.lIGHTBROWN);
+        rectangle1.setColor(Color.GREEN);
+        rectangle.fill();
+        rectangle1.fill();
     }
 
-    public void drawFloor (int j, int i){
-         Rectangle rectangle = new Rectangle(j * DISTANCE, i * DISTANCE, DISTANCE, DISTANCE);
-         rectangle.setColor(Field.lIGHTBROWN);
-         rectangle.fill();
-         }
+    public void drawFloor(int j, int i) {
+        Rectangle rectangle = new Rectangle(j * DISTANCE, i * DISTANCE, DISTANCE, DISTANCE);
+        rectangle.setColor(Field.lIGHTBROWN);
+        rectangle.fill();
+    }
 
-    public void drawTR (int j, int i){
-            drawFloor(j,i);
-            TeamRocket t1= new Arada(new Position(j,i),"mastercoder") ; //no construtor ja esta definido as propriedades e metodos de desenhar o retangilo
-            link1.add(t1);
-
-          }
+    public void drawTR(int j, int i) {
+        drawFloor(j, i);
+        Arada t1 = new Arada(new Position(j, i), "mastercoder");
+        link1.add(t1);
+    }
 
-    public void init(){
-        Player p1= new Player(new Position(0,0), "Mon",this);
+    public void init() {
+        sound.setFile("/Users/codecadet/OMelhorJogo/TrabalhoSecreto/src/game/Sound/Bicycle.wav");
+        sound.play();
+
+        Player p1 = new Player(new Position(0, 0), "Mon", this);
         new Handler(p1);
         this.p1.draw();
-        while(true){
+        while (true) {
+            // Game loop
         }
-
+    }
 
-    }
-        public LinkedList getLink1 (){
-            return this.link1;
-        }
+    public LinkedList getLink1() {
+        return this.link1;
+    }
 
-        public void initBattle(){
-                //if colision:
-
-
-        }
-
-        Sound sound=new Sound();
-
-        public void playMusic(int i){
-            sound.setFile(i);
-            sound.play();
-            sound.loop();
-        }
-        public void stopMusic(){
-            sound.stop();
-        }
-
-
-
-
-
-
+    public void initBattle() {
+        // Implement battle initialization logic
+    }
 }
Index: TrabalhoSecreto/src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TrabalhoSecreto/src/Main.java b/TrabalhoSecreto/src/Main.java
--- a/TrabalhoSecreto/src/Main.java	
+++ b/TrabalhoSecreto/src/Main.java	
@@ -1,11 +1,9 @@
 import game.Game;
-import game.Sound;
 
 public class Main {
     public static void main(String[] args) {
-        Game game1= new Game();
+        Game game1 = new Game();
         game1.draw();
         game1.init();
-        game1.playMusic(0);
     }
-}
\ No newline at end of file
+}
Index: TrabalhoSecreto/src/game/Sound.java
===================================================================
diff --git a/TrabalhoSecreto/src/game/Sound.java b/TrabalhoSecreto/src/game/Sound.java
--- a/TrabalhoSecreto/src/game/Sound.java	
+++ b/TrabalhoSecreto/src/game/Sound.java	
@@ -1,43 +1,39 @@
 package game;
 
-import javax.sound.sampled.AudioInputStream;
-import javax.sound.sampled.AudioSystem;
-import javax.sound.sampled.Clip;
-import java.net.URL;
+import javax.sound.sampled.*;
+import java.io.File;
+import java.io.IOException;
 
 public class Sound {
-    Clip clip;
 
-    URL soundURL[]=new URL[10];
+    private Clip clip;
 
-    public Sound(){
-        soundURL[0]=getClass().getResource("/Sound/town1.wav");
-        soundURL[1]=getClass().getResource("/Sound/town1.wav");
-    }
-
-    public void setFile(int i){
+    public void setFile(String filePath) {
         try {
-
-            AudioInputStream ais= AudioSystem.getAudioInputStream(soundURL[i]);
-            clip=AudioSystem.getClip();
-            clip.open(ais);
-            System.out.println("caquinha musical");
-        }catch (Exception e){
-            System.out.println("coco");
+            File soundFile = new File(filePath);
+            AudioInputStream audioStream = AudioSystem.getAudioInputStream(soundFile);
+            clip = AudioSystem.getClip();
+            clip.open(audioStream);
+        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
+            e.printStackTrace();
         }
-
     }
 
-    public void play(){
-        clip.start();
-
-    }
-
-    public void loop(){
-
-        clip.loop(clip.LOOP_CONTINUOUSLY);
+    public void play() {
+        if (clip != null) {
+            clip.start();
+        }
     }
-    public void stop(){
-    clip.stop();
+
+    public void stop() {
+        if (clip != null) {
+            clip.stop();
+        }
     }
+
+    public void loop() {
+        if (clip != null) {
+            clip.loop(Clip.LOOP_CONTINUOUSLY);
+        }
+    }
 }
